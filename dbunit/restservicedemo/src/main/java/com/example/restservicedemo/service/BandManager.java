package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.restservicedemo.domain.Song;
import com.example.restservicedemo.domain.Band;

public class BandManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_BAND = "CREATE TABLE Band (b_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(20), yoc int)";
	private static final String CREATE_TABLE_SONG = "CREATE TABLE Song (s_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, title varchar(25), album varchar(25), owner_id bigint FOREIGN KEY references Band(b_id))";

	private PreparedStatement addBandStmt;

	private PreparedStatement addSongStmt; 
	private PreparedStatement deleteAllSongsStmt;
	private PreparedStatement giveSongStmt;
	private PreparedStatement deleteSongWithIdStmt; 

	private PreparedStatement deleteAllBandsStmt;
	private PreparedStatement getAllBandsStmt;
	private PreparedStatement getBandByIdStmt;
	private PreparedStatement deleteBandWithNameStmt; 

	private PreparedStatement getAllBandsWithSongsStmt;
	private PreparedStatement getSongWithOwnerStmt;
	private PreparedStatement getAllSongsStmt;

	private PreparedStatement addSongWithIdStmt;
	
	private Statement statement;

	public BandManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Band".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_BAND);

			rs = connection.getMetaData().getTables(null, null, null, null);
			tableExists = false;
			while (rs.next()) {
				if ("Song".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_SONG);

			addBandStmt = connection.prepareStatement("INSERT INTO Band (b_id, name, yoc) VALUES (?, ?, ?)");
			deleteAllBandsStmt = connection.prepareStatement("DELETE FROM Band");
			getAllBandsStmt = connection.prepareStatement("SELECT b_id, name, yoc FROM Band");
			getBandByIdStmt = connection.prepareStatement("SELECT b_id, name, yoc FROM Band WHERE b_id = ?");
			deleteBandWithNameStmt= connection.prepareStatement("DELETE FROM Band WHERE name = ?");
			
			addSongStmt = connection.prepareStatement("INSERT INTO Song (s_id, title, album) VALUES (?, ?, ?)");
			deleteAllSongsStmt = connection.prepareStatement("DELETE FROM Song");
			deleteSongWithIdStmt = connection.prepareStatement("DELETE FROM Song WHERE s_id = ?");
			getAllSongsStmt = connection.prepareStatement("SELECT s_id, title, album FROM Song");

			
			giveSongStmt = connection.prepareStatement("UPDATE Song SET owner_id = ? WHERE s_id = ?");

			getAllBandsWithSongsStmt = connection.prepareStatement(
					"SELECT b_id, name, yoc, s_id, title, album, owner_id FROM Band JOIN Song ON owner_id = b_id");

			getSongWithOwnerStmt = connection.prepareStatement(
					"SELECT b_id, name, yoc, s_id, title, album, owner_id FROM Band JOIN Song ON s_id = ?");
			
			addSongWithIdStmt = connection.prepareStatement("INSERT INTO Song (s_id, title, album) VALUES (?, ?, ?)");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}
	
	public void clearBands() {
		try {
			deleteAllBandsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void clearSongs() {
		try {
			deleteAllSongsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addBand(Band band) {
		int count = 0;
		try {
			addBandStmt.setLong(1, band.getId());
			addBandStmt.setString(2, band.getName());
			addBandStmt.setInt(3, band.getYoc());

			count = addBandStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int addSong(Song song) {
		int count = 0;
		try {
			addSongStmt.setLong(1, song.getId());
			addSongStmt.setString(2, song.getTitle());
			addSongStmt.setString(3, song.getAlbum());

			count = addSongStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int addSongWithId(Song song) {
		int count = 0;
		try {
			addSongWithIdStmt.setLong(1, song.getId());
			addSongWithIdStmt.setString(2, song.getTitle());
			addSongWithIdStmt.setString(3, song.getAlbum());

			count = addSongWithIdStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int deleteSongWithId(Long id) {
		int count = 0;
		try {
			deleteSongWithIdStmt.setLong(1, id);
			
		count = deleteSongWithIdStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int deleteBandWithName(String name) {
		int count = 0;
		try {
			deleteBandWithNameStmt.setString(1, name);
			
		count = deleteBandWithNameStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	
	public List<Band> getAllBands() {
		List<Band> bands = new ArrayList<Band>();

		try {
			ResultSet rs = getAllBandsStmt.executeQuery();

			while (rs.next()) {
				Band b = new Band();
				b.setId(rs.getInt("b_id"));
				b.setName(rs.getString("name"));
				b.setYoc(rs.getInt("yoc"));
				bands.add(b);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return bands;
	}

	public Band getBand(Long id) {
		Band b = new Band();
		try {
			getBandByIdStmt.setLong(1, id);
			ResultSet rs = getBandByIdStmt.executeQuery();

			while (rs.next()) {
				b.setId(rs.getInt("b_id"));
				b.setName(rs.getString("name"));
				b.setYoc(rs.getInt("yoc"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return b;
	}


	

	public Map<Band, List<Song>> getBandWithSong() {

		List<Song> songs = new ArrayList<Song>();

		Map<Band, List<Song>> result = new HashMap<>();

		try {
			ResultSet rs = getAllBandsWithSongsStmt.executeQuery();

			while (rs.next()) {

				Band b = new Band();

				b.setId(rs.getInt("b_id"));
				b.setName(rs.getString("name"));
				b.setYoc(rs.getInt("yoc"));

				Song s = new Song();
				s.setId(rs.getInt("s_id"));
				s.setTitle(rs.getString("title"));
				s.setAlbum(rs.getString("album"));

				s.setOwner(b);

				if (result.containsKey(b)) {
					songs = result.get(b);
					songs.add(s);
				} else {
					songs = new ArrayList<>();
					songs.add(s);
					result.put(b, songs);
				}

			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	public Song getSongWithOwner(Song song) {

		Song s = new Song();
		try {
			
			getSongWithOwnerStmt.setLong(1, song.getId());
			ResultSet rs = getSongWithOwnerStmt.executeQuery();

			while (rs.next()) {

				Band b = new Band();

				b.setId(rs.getInt("b_id"));
				b.setName(rs.getString("name"));
				b.setYoc(rs.getInt("yoc"));

				s.setId(rs.getInt("s_id"));
				s.setTitle(rs.getString("title"));
				s.setAlbum(rs.getString("album"));

				s.setOwner(b);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return s;
	}
	
	public int giveSong(Song song, Band band) {
		int count = 0;
		try {
			
			giveSongStmt.setLong(1, band.getId());
			giveSongStmt.setLong(2, song.getId());
		
			count = giveSongStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public List<Song> getAllSongs() {
		
		List<Song> songs = new ArrayList<Song>();

		try {
			ResultSet rs = getAllSongsStmt.executeQuery();

			while (rs.next()) {
				Song s = new Song();
				s.setId(rs.getInt("s_id"));
				s.setTitle(rs.getString("title"));
				s.setAlbum(rs.getString("Album"));
				songs.add(s);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return songs;
	}
	

}
